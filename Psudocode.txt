Project 2 : Shell 

How does it work? 
-The purpose of a shell is to provide an interface for users to access an operating systemâ€™s services, which include file and process management, or execute programs. 

What do I need? 

-built-in commands :
    -exit
    -help
    -pwd: prints the current working directory to standard output.
    -cd: that takes one argument, a directory path, and changes the current working directory to that directory. Google sys calls chdir and getcwd. 


-try type stuff that are not in shell built in command , display a message because it doesn't execute program. Modify the shell so that it can execute program when they are entered in the shell.

-The first word of a shell command is the name of the program. The rest of the words are the command-line arguments to the program. 

-assume that the first word of the command will be the full path to the program.
Ex: wc, you have to run /usr/bin/wc

-When your shells need to execute a program, it should fork a child process. Calls one of the functions from exec family to run the new program.

-Cannot use execvp.

-the parent process should wait until the child process completes and continue listening for more commands 

Once its implements you can do :

./shell 
0: /usr/bin/wc shell.c
77 262 1843 shell.c
1:exit



PseudoCode for Week1 Deliverables:

Main():
Write a welcome message 
print("Welcome to my shell!");

Loop continously until the user types exit.
while(true):
Display the shell prompt 
Print">"(without new line)

Read user input(using getline or fget)
userInput = Read_Line()
use fget 

Parse the input(use a function?)
commandToken = Parse(userInput)
Parse is given in the helpers.c

If the user type in 'exit', then exit the shell
if(commandToken[0] == "exit") :
Exit the program with returning code 1
exit_program(1);

If the user tytpes 'help', call the help function
else if(commandToken[0]=='help'):
Help();

If the user types 'pwd', call the pwd function
else if (commandToken[0] == 'pwd'):
pwd();

If the user types 'cd' call the cd function
else if(commandToken[0] == "cd"):
     check if the target directory is provided
     if(commandToken has arguments):
     cd(commandToken[1])
     else:
     print"Error : no directory specified."

If the user types 'wait', call the wait function
else if (commandToken[0]== 'wait'):
Wait();

for any other command that is not a built in command :
else :
print("shell :" + commandTOkens[0]+ " : command is not found")

continue loop for next command.

help function :
void help(){
    print : Available built-in commands:"
    print "  help  - Display this help message"
    print "  exit  - Exit the shell"
    print "  pwd   - Print the current working directory"
    print "  cd    - Change the current working directory"
    print "  wait  - Wait for background processes to finish"
}

pwd function :
void pwd(){
    use getcwd() to retrieve the current directory.

currentDir = getcwd()
 print currentDir
}

cd function
string cd(string targetDirectory){
    call chdir() with the target directory
    if(chdir(targetDirectory)== true){
        call pwd to show the new directory
        pwd()
    }
    else {
        print unable to change directory to + targetDirectory.
    }
}

wait() funciton :
void wait(){
    
}

Pseudocode for Week 2 
-Should be able to run ./tucp or ./tuls
./tucp = path leading to the tucp executable in the current directory
 Week 2 is to execute programs by creating a child process using fork(), 
 replacing it with execv(), and waiting for it to finish using wait().
 resolve non-full path programs by searching for the executable in directories listed in the PATH environment variable.

 1.Check if it's a built in command (cd,powd,help), if so execute normally.
 2. If not a built in command, assume it's an extrernal program.
 3.create child process using fork
 4. In the child process:
    -execv()to replace the child process with the executable program
    -if execv() fails(executable isn't found) the child process exit.

5. parent process
-Use waitpid() to wait for the child to finish
6.If user enters only program(ls, instead of /bin/ls) shell{
    retrieve PATH environment varibale ujsing getenv("Path")
    Tokenize PATH using strtok()
    Try each directory in PATH to see if the program exists
    if found, execute using execv()
    not found print error
}

sooo :

Main(shell loop){
    print "welcome to my shell"
    while(true){
        print "prompt >"
        Read user input using fget();
        Parase user input into tokens using given helper.c function
        
        if tokens[0] == NULL{
            continue;
        }
        else if(tokens[0]== built in command){
            run the built in command
        }
        else{
            call execute program (tokens)
        }
    }
}


Function execute(tokens){
    Fork a child process 
    if fork() didn't work{
        printf(fork failed)
        return 1;
    }

    if process is the child{
        if tokens[0] == "/"{
            execv(tokens[0],tokens)
            if(execv()fails ){
                print("command is not found);
                return 1;
            }
        }
    }
    else(program name only, ls cd ){
        get Path environment getenv("PATH");
        Tokenize PATH using strtok();

        for each directory in PATH{
            Construct full path by concatenating directory + "/" + tokens[0];
            execv(full_path,tokens);
            if(execv() works){
                child process is replaced
            }
        if execv() fails for all path
        {
            print error :command not found
            return 1;
        }
        
        }
    }
    else{
        wait for the child process to complete using waitpid();
    }

}

Week 3: Redirection and Pipe
-Redirection(<,>)
detect < or > in the command line
use open() to get a file descriptor for reading/writing
use dup2() ot replace stdin(0) or stdout(1) with the file descriptor.
execute the command with execv();

-Pipe
detect | in the command line.
use Pipe() to create a communication channel.
-FOrk 2 child processes :
    One process write the pipe.
    one process read the pipe.
use dup2() to replace stdin/stdout with the pipe.

PseudoCode: 

Main : 
    -print welcome message
    -start a loop to:
        -print "prompt >"
        -read user input using fgets()
        -Parse user input into tokens
        -check if user entere:
        -"exit" 
        -"help"
        -"pwd"
        -"cd"
        if so call the functions
        other wise, check if input contains:
        -Redirection operators('<','>')
        -pipe('|')
        -If Redirection is detected call redirection function
        -If a pipe is detected call exe_pipe()
        Other wise call execute()

    redirection(tokens){
        loop through tokens to find '<' or '>'
        if '<'{
            -open the file for reading using open();
            -use dup2() to replace stdin(fd 0 ) with file descriptor .
        }
        else if '>' is found{
            -open the file for writing using open()
            -use dup2() to repelace stdout (fd 1 )with file descriptor
        }
        -Remove '<' or '>' and filenames from tokens
        -Call execute() to run the command with modified input/output.
    }

    exe_pipe(){
        -create a pipe using pipe()
        -Fork 2 child process:
        -first child process{

        
            -close unused pipe ends
            -Redirect stdout to pipe write end using dup2()
            -execute the first command
        }
        -second process{
            -close unused pipe ends
            redirect stdin to pipe read end using dup2()
            execute the second command.
        }

        -Parent process:
        -close pipe ends
        -wait for both child process to finish
    }

    the new execute fucntion 

    execute(tokens){
        -fork a child process-if fork fails print error and return
        if in child process{
            if command is not a ful path{
                call resolve_path() to find correct executable
            }
            execute command using execv()

        }
        if in parent process{
            wait for child to complete.
        }
    }

right now normal command ls cd pwd works

need to make ls >something.txt work 
wc< something.txt 
ls | wc


Week 4 handling multiple pipes, background process, wait builtin.

multiple pipes :
-detece '|' and count the number of commands
-Create 'n-1' pipes(n is the number of commands).
-loop through each command:
    1.fork a new child.
    2.if not first command set stdin(dup2) to read from the previous pipe.
    3.If not the last command , set stdout (dup2) to write the next pipe
    4.close all unuse pipe in the child process 
    5.execute the command.
-close all pipe in the child process
-wait for all child process to finish

Handling background process :
1.Parse to check if the last token is &
2.If '&":
    -remove & from command
    -fork a new child process
    -If inside the child process, execute the command and exit.
    -parent does not wait for the child to finish
    -continue showing the proimpt
if no &, execute normally.

Wait builtin:
1.if wait:
 -loop through all child process
 2.use "waitpid()" to wait for all background process
 3.when done, return to prompt

Pseudocode :

main() {
    print "Welcome to my shell!"
    while(true) {
        print "prompt > "
        read user input into 'line'
        
        tokenize the input into 'tokens'

        if tokens[0] == "exit": 
            free memory and exit program

        else if tokens[0] == "help": 
            call help()

        else if tokens[0] == "pwd": 
            call pwd()

        else if tokens[0] == "cd": 
            call cd(tokens[1])

        else if tokens[0] == "wait": 
            call wait_for_background_processes()

        else:
            if input contains "|":
                call handle_pipes(tokens) // NEW FUNCTION for multiple pipes
            else:
                call execute(tokens) // Keep Week 3 execute() but add background support

    }
}

// New: Handle Multiple Pipes
handle_pipes(tokens) {
    split tokens into multiple commands using "|"
    create N-1 pipes
    loop through each command:
        fork a child
        if child process:
            if not first command: dup2(previous pipe's read end, stdin)
            if not last command: dup2(current pipe's write end, stdout)
            close all pipes
            execute the command
        else: (parent process)
            store child PID if process runs in background ("&" detected)
}

Execute function (Now supports background processes)
execute(tokens) {
    check if "&" is in tokens (background process)
    remove "&" from tokens if found
    fork a child process
    if child:
        handle input/output redirection (from Week 3)
        execute command
    else:
        if process is not background, wait for it
        else store PID in background_process_list
}
Wait for Background Processes
wait_for_background_processes() {
    loop through background_process_list:
        call waitpid() for each PID
}

Final Pseudocode combining all of the Weeks: 
// Main Shell Loop
main() {
    print "Welcome to my shell!";
    
    while (true) {
        print "prompt > ";
        
        // Read user input
        read input into 'line';
        
        // Tokenize input
        tokens = parse(line, " \n");
        
        // If no input, continue
        if tokens[0] == NULL:
            continue;
        
        // Handle built-in commands
        if tokens[0] == "exit":
            free memory;
            exit();
        else if tokens[0] == "help":
            call help();
        else if tokens[0] == "pwd":
            call pwd();
        else if tokens[0] == "cd":
            call cd(tokens[1]);
        else if tokens[0] == "wait":
            call wait_for_background_processes();
        else:
            // Detect pipes
            if input contains "|":
                call handle_pipes(tokens);
            else:
                call execute(tokens);
    }
}

// Built-in Commands
help() {
    print available built-in commands;
}

pwd() {
    get and print current working directory;
}

cd(target_directory) {
    if target_directory exists:
        change to it using chdir();
    else:
        print error message;
}

wait_for_background_processes() {
    loop through background_process_list:
        call waitpid() for each PID;
}

// **Handling Pipes**
handle_pipes(tokens) {
    split tokens into multiple commands using "|";
    create N-1 pipes;
    
    loop through each command:
        fork a child;
        if child process:
            if not first command: dup2(previous pipeâ€™s read end, stdin);
            if not last command: dup2(current pipeâ€™s write end, stdout);
            close all pipes;
            execute the command;
        else: (parent process)
            store child PID if process runs in background ("&" detected);
    
    // Close all pipes in parent
    close all pipes;
    
    // Wait for all child processes
    for each command:
        waitpid();
}

// **Execute Function (Handles Redirection and Background Processes)**
execute(tokens) {
    check if "&" is in tokens (background process);
    remove "&" if found;
    
    fork a child process;
    
    if child:
        // Handle Input/Output Redirection
        loop through tokens:
            if token == "<":
                open file for reading;
                redirect stdin using dup2();
            if token == ">":
                open file for writing;
                redirect stdout using dup2();
        
        // Resolve full path if needed
        if command is not a full path:
            resolve_path();
        
        // Execute the command
        execv(command_path, tokens);
    
    else: (Parent process)
        if process is not background:
            wait for it;
        else:
            store PID in background_process_list;
}